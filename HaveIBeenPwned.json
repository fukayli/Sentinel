{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "metadata": {
        "comments": "Check emails across multiple data breaches via haveibeenpwned api, to see if email address has been compromised.",
        "author": "SOC Prime"
    },
    "parameters": {
        "playbookName": {
            "defaultValue": "[concat('Email-Check-HaveIBeenPwned-', uniqueString(resourceGroup().id))]",
            "type": "String"
        },
        "AzureLogAnalyticsLogName": {
            "type": "string",
            "defaultValue": "HaveIBeenPwned",
            "metadata": {
                "description": "Table name in Custom Logs, where compromised email will be saved."
            }
        },
        "Frequency": {
            "type": "string",
            "defaultValue" : "Day",
            "allowedValues": ["Day", "Month", "Week", "Day", "Hour"],
            "metadata": {
                "description": "The unit of time for the recurrence: Hour, Day, Week, or Month"
            }
        },
        "Interval": {
            "type": "Int",
            "defaultValue": 1,
            "metadata": {
                "description": "A positive integer that describes how often playbook runs  based on the frequency"
            }
        },
        "ApiKey": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "A haveibeenpwned API Key to use api"
            }
        },
         "IncludeUnverifiedBreaches": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Search in breaches that have been flagged as 'unverified'"
            }
        },
        "ListOfEmailsToCheck": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Space separated list of email"
            }
        }        
    },
    "variables": {
            "AzureLogAnalyticsDataCollectorName": "[concat('azureloganalyticsdatacollector-', parameters('PlaybookName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('AzureLogAnalyticsDataCollectorName')]",
            "location": "[resourceGroup().location]",
            "properties": {
                "displayName": "[variables('AzureLogAnalyticsDataCollectorName')]",
                "customParameterValues": {},
                "api": {
                    "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('playbookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "Azure Log Analytics Log Name": {
                            "defaultValue": "[parameters('AzureLogAnalyticsLogName')]",
                            "type": "String"
                        },
                        "Email List": {
                            "defaultValue": "[parameters('ListOfEmailsToCheck')]",
                            "type": "String"
                        },
                        "Frequency": {
                            "defaultValue": "[parameters('Frequency')]",
                            "type": "String"
                        },
                        "Interval": {
                            "defaultValue": "[parameters('Interval')]",
                            "type": "Int"
                        },
                        "Api Key": {
                            "defaultValue": "[parameters('ApiKey')]",
                            "type": "String"
                        },
                        "includeUnverified": {
                            "defaultValue": "[parameters('IncludeUnverifiedBreaches')]",
                            "type": "Bool"
                        }
                        
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "@parameters('Frequency')",
                                "interval": "@parameters('Interval')"
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "For_each(Parse_user_input)": {
                            "foreach": "@split(parameters('Email List'), ' ')",
                            "actions": {
                                "Append_to_array_variable": {
                                    "runAfter": {},
                                    "type": "AppendToArrayVariable",
                                    "inputs": {
                                        "name": "Email To Check",
                                        "value": "@trim(items('For_each(Parse_user_input)'))"
                                    }
                                }
                            },
                            "runAfter": {
                                "Initialize_Breach_Info_array": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach"
                        },
                        "For_each_Email_To_Check": {
                            "foreach": "@variables('Email To Check')",
                            "actions": {
                                "Current_Item": {
                                    "runAfter": {},
                                    "type": "Compose",
                                    "inputs": "@items('For_each_Email_To_Check')"
                                },
                                "HTTP_breachedaccount_api_call": {
                                    "runAfter": {
                                        "Current_Item": [
                                            "Succeeded"
                                        ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                        "headers": {
                                            "hibp-api-key": "@parameters('Api Key')"
                                        },
                                        "method": "GET",
                                        "uri": "[concat('https://haveibeenpwned.com/api/v3/breachedaccount/@{outputs(''Current_Item'')}?includeUnverified=@{parameters(''includeUnverified'')}&truncateResponse=false')]"
                                    }
                                },
                                "Switch": {
                                    "runAfter": {
                                        "HTTP_breachedaccount_api_call": [
                                            "Succeeded",
                                            "Failed"
                                        ]
                                    },
                                    "cases": {
                                        "Case": {
                                            "case": 200,
                                            "actions": {
                                                "For_each": {
                                                    "foreach": "@body('Parse_Response')",
                                                    "actions": {
                                                        "Append__breach_name_to_breach_info_array": {
                                                            "runAfter": {},
                                                            "type": "AppendToArrayVariable",
                                                            "inputs": {
                                                                "name": "Breach Info",
                                                                "value": "@items('For_each')['Name']"
                                                            }
                                                        }
                                                    },
                                                    "runAfter": {
                                                        "Set_variable": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Foreach"
                                                },
                                                "Join": {
                                                    "runAfter": {
                                                        "For_each": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "Join",
                                                    "inputs": {
                                                        "from": "@variables('Breach Info')",
                                                        "joinWith": ","
                                                    }
                                                },
                                                "Parse_Response": {
                                                    "runAfter": {},
                                                    "type": "ParseJson",
                                                    "inputs": {
                                                        "content": "@body('HTTP_breachedaccount_api_call')",
                                                        "schema": {
                                                            "items": {
                                                                "properties": {
                                                                    "Name": {
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "Name"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        }
                                                    }
                                                },
                                                "Send_Data": {
                                                    "runAfter": {
                                                        "Join": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "ApiConnection",
                                                    "inputs": {
                                                        "body": "{\n\"email\" : \"@{outputs('Current_Item')}\",\n\"breached\" : \"@{true}\",\n\"breach_list\" : \"@{body('Join')}\"\n}",
                                                        "headers": {
                                                            "Log-Type": "@parameters('Azure Log Analytics Log Name')",
                                                            "time-generated-field": "@{utcNow()}"
                                                        },
                                                        "host": {
                                                            "connection": {
                                                                "name": "@parameters('$connections')['azureloganalyticsdatacollector_1']['connectionId']"
                                                            }
                                                        },
                                                        "method": "post",
                                                        "path": "/api/logs"
                                                    }
                                                },
                                                "Set_variable": {
                                                    "runAfter": {
                                                        "Parse_Response": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "Breach Info",
                                                        "value": []
                                                    }
                                                }
                                            }
                                        },
                                        "Case_2": {
                                            "case": 404,
                                            "actions": {
                                                "Compose_404": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "[concat('email not found in haveibeenpwned data')]"
                                                }
                                            }
                                        },
                                        "Case_3": {
                                            "case": 400,
                                            "actions": {
                                                "Compose_400": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "Bad request — the account does not comply with an acceptable format (i.e. it's an empty string)"
                                                }
                                            }
                                        },
                                        "Case_4": {
                                            "case": 401,
                                            "actions": {
                                                "Compose_401": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "Unauthorised — either no API key was provided or it wasn't valid"
                                                }
                                            }
                                        },
                                        "Case_5": {
                                            "case": 403,
                                            "actions": {
                                                "Compose_403": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "Forbidden — no user agent has been specified in the request"
                                                }
                                            }
                                        },
                                        "Case_6": {
                                            "case": 429,
                                            "actions": {
                                                "Compose": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "Too many requests — the rate limit has been exceeded"
                                                }
                                            }
                                        },
                                        "Case_7": {
                                            "case": 503,
                                            "actions": {
                                                "Compose_503": {
                                                    "runAfter": {},
                                                    "type": "Compose",
                                                    "inputs": "Service unavailable — usually returned by Cloudflare if the underlying service is not available"
                                                }
                                            }
                                        }
                                    },
                                    "default": {
                                        "actions": {}
                                    },
                                    "expression": "@outputs('HTTP_breachedaccount_api_call')['statusCode']",
                                    "type": "Switch"
                                }
                            },
                            "runAfter": {
                                "For_each(Parse_user_input)": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Initialize_Breach_Info_array": {
                            "runAfter": {
                                "Initialize_Email_To_Check": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Breach Info",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        },
                        "Initialize_Email_To_Check": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Email To Check",
                                        "type": "array",
                                        "value": []
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureloganalyticsdatacollector_1": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('AzureLogAnalyticsDataCollectorName'))]",
                                "connectionName": "[variables('AzureLogAnalyticsDataCollectorName')]",
                                "id": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Web/locations/',resourceGroup().location,'/managedApis/azureloganalyticsdatacollector')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}
